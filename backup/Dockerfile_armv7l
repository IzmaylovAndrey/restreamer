FROM resin/rpi-raspbian:jessie

MAINTAINER datarhei <info@datarhei.org>

ENV NODE_VERSION=6.3.1 \
    NPM_VERSION=3.7.3 \

    FFMPEG_VERSION=2.8.6 \
    YASM_VERSION=1.3.0 \
    LAME_VERSION=3_99_5 \
    NGINX_VERSION=1.9.9 \
    NGINX_RTMP_VERSION=1.1.7.10 \

    SRC="/usr/local" \
    LD_LIBRARY_PATH="${SRC}/lib" \
    PKG_CONFIG_PATH="${SRC}/lib/pkgconfig" \

    BUILDDEPS="autoconf automake gcc g++ libtool make nasm zlib1g-dev libssl-dev xz-utils cmake build-essential libpcre3-dev"

RUN rm -rf /var/lib/apt/lists/* && \
    apt-get update && \
    apt-get install -y --force-yes curl python git libpcre3 tar bzip2 perl ca-certificates ${BUILDDEPS} && \

    # node
    DIR="$(mktemp -d)" && cd "${DIR}" && \
    set -x && \
    curl -LOks "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-armv7l.tar.gz" && \
    tar xzvf "node-v${NODE_VERSION}-linux-armv7l.tar.gz" \
        -C "${SRC}" \
        --strip-components=1 && \
    npm install -g npm && \
    npm cache clear && \
    npm config set unsafe-perm true -g --unsafe-perm && \
    rm -rf "${DIR}" && \

    # yasm
    DIR="$(mktemp -d)" && cd "${DIR}" && \
    curl -LOks "https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VERSION}.tar.gz" && \
    tar xzvf "yasm-${YASM_VERSION}.tar.gz" && \
    cd "yasm-${YASM_VERSION}" && \
    ./configure \
        --prefix="${SRC}" \
        --bindir="${SRC}/bin" && \
    make -j"$(nproc)" && \
    make install && \
    make distclean && \
    rm -rf "${DIR}" && \

    # x264
    DIR="$(mktemp -d)" && cd "${DIR}" && \
    curl -LOks "ftp://ftp.videolan.org/pub/x264/snapshots/last_x264.tar.bz2" && \
	tar -xjvf last_x264.tar.bz2 && \
    cd x264-* && \
    ./configure \
        --prefix="${SRC}" \
        --bindir="${SRC}/bin" \
        --enable-static \
        --disable-cli && \
    make -j"$(nproc)" && \
    make install && \
    make distclean && \
    rm -rf "${DIR}" && \
	

	#libfdk_aac
	DIR="$(mktemp -d)" && cd "${DIR}" && \
	curl -LOks https://github.com/mstorsjo/fdk-aac/tarball/master/fdk-aac.tar.gz && \
	tar xzvf fdk-aac.tar.gz && \
	cd mstorsjo-fdk-aac* && \
	autoreconf -fiv && \
	./configure --prefix="${SRC}" --disable-shared && \
	make && \
	make install && \
	make distclean && \
	rm -rf "${DIR}" && \
   
	 # libmp3lame
    DIR="$(mktemp -d)" && cd "${DIR}" && \
    curl -LOks "https://github.com/rbrito/lame/archive/RELEASE__${LAME_VERSION}.tar.gz" && \
    tar xzvf "RELEASE__${LAME_VERSION}.tar.gz" && \
    cd "lame-RELEASE__${LAME_VERSION}" && \
    ./configure \
        --prefix="${SRC}" \
        --bindir="${SRC}/bin" \
        --enable-nasm \
        --disable-shared && \
    make -j"$(nproc)" && \
    make install && \
    make distclean && \
    rm -rf "${DIR}" && \

    # ffmpeg
    # patch: andrew-shulgin Ignore invalid sprop-parameter-sets missing PPS
    DIR="$(mktemp -d)" && cd "${DIR}" && \
    curl -LOks "https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz" && \
    tar xzvf "ffmpeg-${FFMPEG_VERSION}.tar.gz" && \
    cd "ffmpeg-${FFMPEG_VERSION}" && \
    curl -Lks "https://github.com/FFmpeg/FFmpeg/commit/1c7e2cf9d33968375ee4025d2279c937e147dae2.patch" | patch -p1 && \
    ./configure \
        --prefix="${SRC}" \
        --bindir="${SRC}/bin" \
        --extra-cflags="-I${SRC}/include" \
        --extra-ldflags="-L${SRC}/lib" \
        --extra-libs=-ldl \
        --enable-nonfree \
        --enable-gpl \
        --enable-version3 \
        --enable-avresample \
        --enable-libfdk-aac \
	--enable-libmp3lame \
        --enable-libx264 \
        --enable-openssl \
        --enable-postproc \
        --enable-small \
        --disable-debug \
        --disable-doc \
        --disable-ffserver && \
    make -j"$(nproc)" && \
    make install && \
    make distclean && \
    hash -r && \
    cd tools && \
    make qt-faststart && \
    cp qt-faststart "${SRC}/bin" && \
    rm -rf "${DIR}" && \
    echo "${SRC}/lib" > "/etc/ld.so.conf.d/libc.conf" && \
    ffmpeg -buildconf && \

    # nginx-rtmp
    DIR="$(mktemp -d)" && cd "${DIR}" && \
    curl -LOks "https://github.com/nginx/nginx/archive/release-${NGINX_VERSION}.tar.gz" && \
    tar xzvf "release-${NGINX_VERSION}.tar.gz" && \
    
	git clone https://github.com/arut/nginx-rtmp-module.git && \

    cd "nginx-release-${NGINX_VERSION}" && \
    auto/configure \
        --with-http_ssl_module \
        --add-module="../nginx-rtmp-module" && \
    make -j"$(nproc)" && \
    make install && \
    rm -rf "${DIR}" && \

    apt-get purge -y --auto-remove ${BUILDDEPS} && \
    rm -rf /tmp/*

COPY . /restreamer
WORKDIR /restreamer

RUN npm install -g bower grunt grunt-cli nodemon public-ip && \
    npm install && \
    grunt build && \
    npm prune --production && \
    npm cache clean && \
    bower cache clean --allow-root

ENV RS_USERNAME admin
ENV RS_PASSWORD datarhei

EXPOSE 8080
VOLUME ["/restreamer/db"]

CMD ["./run.sh"]
